name: Branch Management

on:
  schedule:
    - cron: '0 * * * *' # 毎時0分に実行

  workflow_dispatch:

jobs:
  extract_branches:
    runs-on: [ self-hosted, Linux ]
    outputs:
      old_branches: ${{ steps.extract_branches.outputs.old_branches }}
      new_branches: ${{ steps.extract_branches.outputs.new_branches }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Extract Branches
        id: extract_branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const config = yaml.load(fs.readFileSync('config.yaml', 'utf8'));
            const currentTime = new Date();

            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oldBranches = [];
            const newBranches = [];

            for (const branchConfig of config.branches) {
              const baseName = branchConfig.name;
              const schedule = branchConfig.schedule;

              let shouldMerge = false;
              for (const scheduledTime of schedule) {
                const scheduledDate = new Date(scheduledTime);

                if (isNaN(scheduledDate)) {
                  console.log(`Invalid scheduledTime: ${scheduledTime}`);
                  continue;
                }

                const timeDiff = currentTime.getTime() - scheduledDate.getTime();

                if (0 <= timeDiff && timeDiff < 60 * 60 * 1000) {
                  shouldMerge = true;
                  break;
                }
              }

              if (!shouldMerge) {
                continue;
              }

              const branchPattern = new RegExp(`^${baseName}/feature-(\\d{4})$`);

              for (const branch of branches) {
                if (branch.name.match(branchPattern)) {
                  oldBranches.push(branch.name);
                }
              }

              // 新しいブランチ名を生成
              const mmdd = ("0" + (currentTime.getMonth() + 1)).slice(-2) + ("0" + currentTime.getDate()).slice(-2);
              const newBranchName = `${baseName}/feature-${mmdd}`;
              newBranches.push({ branch: newBranchName, baseName });
            }

            core.setOutput('old_branches', JSON.stringify(oldBranches));
            core.setOutput('new_branches', JSON.stringify(newBranches));

      - run: |
          echo "Old branches: ${{ steps.extract_branches.outputs.old_branches }}"

      - run: |
          echo "New branches: ${{ steps.extract_branches.outputs.new_branches }}"

  merge_old_branches:
    needs: extract_branches
    runs-on: [ self-hosted, Linux ]
    if: ${{ needs.extract_branches.outputs.old_branches }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.extract_branches.outputs.old_branches) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge branch into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          BRANCH="${{ matrix.branch }}"
          echo "Processing branch: $BRANCH"

          # Gitの設定
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 最新のmainを取得
          git checkout main
          git pull origin main

          # 対象のブランチをフェッチ
          git fetch origin "$BRANCH":"$BRANCH"

          # ブランチをマージ
          git merge --no-ff --no-edit "$BRANCH" || {
            echo "Merge conflict when merging $BRANCH into main. Aborting merge."
            git merge --abort
            exit 1
          }

          # マージコミットをプッシュ
          git push origin main

          # ブランチを削除
          git branch -d "$BRANCH"
          git push origin --delete "$BRANCH"

          echo "Successfully merged and deleted branch $BRANCH"

  yield_new_branches:
    needs: [merge_old_branches]
    runs-on: [ self-hosted, Linux ]
    if: ${{ needs.extract_branches.outputs.new_branches }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.extract_branches.outputs.new_branches) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create new branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          BRANCH="${{ matrix.branch }}"
          echo "Creating new branch: $BRANCH"

          # Gitの設定
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 最新のmainを取得
          git checkout main
          git pull origin main

          # 新しいブランチを作成
          git checkout -b "$BRANCH"

      - name: Update branch-status.yaml
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const path = 'branch-status.yaml';
            const branch = '${{ matrix.branch }}';
            const baseName = '${{ matrix.baseName }}';
            const currentTime = new Date().toISOString();

            let branchStatus = {};
            if (fs.existsSync(path)) {
              branchStatus = yaml.load(fs.readFileSync(path, 'utf8'));
            }

            branchStatus[baseName] = {
              branch_name: branch,
              created_at: currentTime
            };

            fs.writeFileSync(path, yaml.dump(branchStatus));

            console.log(`Updated ${path}`);

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          BRANCH="${{ matrix.branch }}"
          git add branch-status.yaml
          git commit -m "Update branch-status.yaml for $BRANCH"

          # ブランチと変更をプッシュ
          git push origin "$BRANCH"
