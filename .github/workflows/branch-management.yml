name: Branch Management

on:
  schedule:
    - cron: '0 * * * *' # 毎時0分に実行

  workflow_dispatch:

jobs:
  extract_old_branches:
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{
        always()
      }}
    outputs:
      old_branches: ${{ steps.extract_old_branches.outputs.old_branches }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Extract Branches
        id: extract_old_branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const config = yaml.load(fs.readFileSync('config.yaml', 'utf8'));
            const currentTime = new Date();

            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oldBranches = [];

            for (const branchConfig of config.branches) {
              const baseName = branchConfig.name;
              const schedule = branchConfig.schedule;

              let shouldMerge = false;
              for (const scheduledTime of schedule) {
                const scheduledDate = new Date(scheduledTime);

                if (isNaN(scheduledDate)) {
                  console.log(`Invalid scheduledTime: ${scheduledTime}`);
                  continue;
                }

                const timeDiff = currentTime.getTime() - scheduledDate.getTime();

                if (0 <= timeDiff && timeDiff < 60 * 60 * 1000) {
                  shouldMerge = true;
                  break;
                }
              }

              if (!shouldMerge) {
                continue;
              }

              const branchPattern = new RegExp(`^${baseName}/feature-(\\d{4})$`);

              for (const branch of branches) {
                if (branch.name.match(branchPattern)) {
                  oldBranches.push(branch.name);
                }
              }
            }

            core.setOutput('old_branches', JSON.stringify(oldBranches));

      - run: |
          echo "Old branches: ${{ steps.extract_old_branches.outputs.old_branches }}"

  create_lock:
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{
        always()
      }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Create .lock file
        run: |
          touch .lock

      - name: Commit and push .lock file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .lock
          git commit -m "Lock the repository for automatic branch management" || echo "No changes to commit"
          git push origin main

  merge_old_branches:
    needs: [ extract_old_branches, create_lock ]
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{
        ! failure() &&
        needs.create_lock.result == 'success' &&
        needs.extract_old_branches.result == 'success' &&
        needs.extract_old_branches.outputs.old_branches && fromJson(needs.extract_old_branches.outputs.old_branches).length > 0
      }}
    outputs:
      failed_base_names: ${{ steps.merge_branches.outputs.failed_base_names }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge Branches Sequentially
        id: merge_branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          OLD_BRANCHES='${{ needs.extract_old_branches.outputs.old_branches }}'
          BRANCHES=$(echo "$OLD_BRANCHES" | jq -r '.[]')

          # 最新のmainを取得
          git checkout main
          git pull origin main

          FAILED_BASE_NAMES=()

          for BRANCH in $BRANCHES; do
            echo ""
            echo ""
            echo ""
            echo "Processing branch: $BRANCH"

            BASE_NAME=$(echo "$BRANCH" | sed -E 's|/[^/]+$||')

            echo "Base name: $BASE_NAME"

            # 対象のブランチをフェッチ
            git fetch origin "$BRANCH":"$BRANCH"

            # ブランチをマージ
            if git merge --no-ff --no-edit "$BRANCH"; then
              echo "Successfully merged $BRANCH into main."
              git push origin main
              git branch -d "$BRANCH"
              git push origin --delete "$BRANCH"
            else
              echo "Merge conflict when merging $BRANCH into main. Aborting merge."
              git merge --abort
              FAILED_BASE_NAMES+=("$BASE_NAME")
            fi
          done

          # 出力用にJSON配列に変換
          if [ ${#FAILED_BASE_NAMES[@]} -eq 0 ]; then
            echo "failed_base_names=[]" >> $GITHUB_ENV
          else
            echo "failed_base_names=$(echo "${FAILED_BASE_NAMES[@]}" | jq -R . | jq -s .)" >> $GITHUB_ENV
          fi

      - run: |
          echo "${{ steps.merge_branches.outputs.failed_base_names }}"

  extract_new_branches:
    needs: [ merge_old_branches ]
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{ 
        ! failure()
      }}
    outputs:
      new_branches: ${{ steps.extract_new_branches.outputs.new_branches }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Extract New Branches
        id: extract_new_branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const config = yaml.load(fs.readFileSync('config.yaml', 'utf8'));
            const currentTime = new Date();

            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const newBranches = [];

            // Get failed_base_names from job outputs
            const content = '${{ needs.merge_old_branches.outputs.failed_base_names }}';
            console.log(content);
            const failedBaseNames = JSON.parse(content);

            for (const branchConfig of config.branches)
            {
              const baseName = branchConfig.name;

              // Skip creating new branch if baseName is in failedBaseNames
              if (failedBaseNames.includes(baseName))
              {
                continue;
              }

              // 新しいブランチ名を生成
              const mmdd = ("0" + (currentTime.getMonth() + 1)).slice(-2) + ("0" + currentTime.getDate()).slice(-2);
              newBranches.push(`${baseName}/feature-${mmdd}`);
            }

            core.setOutput('new_branches', JSON.stringify(newBranches));

      - run: |
          echo "New branches after filtering: ${{ steps.extract_new_branches.outputs.new_branches }}"

  update_branch_status:
    needs: [ extract_new_branches ]
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{
        ! failure() &&
        needs.extract_new_branches.result == 'success' &&
        needs.extract_new_branches.outputs.new_branches && fromJson(needs.extract_new_branches.outputs.new_branches).length > 0 
      }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Check and Update branch-status.yaml
        id: check_update_status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const path = 'branch-status.yaml';

            // Load existing branch-status.yaml if it exists
            let branchStatus = {};
            if (fs.existsSync(path))
            {
              branchStatus = yaml.load(fs.readFileSync(path, 'utf8'));
            }

            // Get new branches from job outputs
            const newBranches = JSON.parse('${{ needs.extract_new_branches.outputs.new_branches }}');

            let updated = false;
            const currentTime = new Date().toISOString();

            for (const branch of newBranches)
            {
              const baseName = branch.replace(/\/[^/]+$/, '');
              if (!branchStatus[baseName])
              {
                branchStatus[baseName] = {
                  branch_name: branch,
                  created_at: currentTime
                };
                updated = true;
                console.log(`Added entry for branch: ${branch}`);
              }
            }

            if (updated)
            {
              fs.writeFileSync(path, yaml.dump(branchStatus));
              core.setOutput('updated', 'true');
            }
            else
            {
              console.log('No updates required for branch-status.yaml');
              core.setOutput('updated', 'false');
            }

      - name: Commit and Push branch-status.yaml
        if: ${{ steps.check_update_status.outputs.updated == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add branch-status.yaml
          git commit -m "Add entries to branch-status.yaml for new branches"

          git push origin main

  yield_new_branches:
    needs: [ extract_new_branches, update_branch_status ]
    runs-on: [ self-hosted, Linux ]
    if: |
      ${{
        ! failure() &&
        needs.extract_new_branches.result == 'success' &&
        needs.extract_new_branches.outputs.new_branches && fromJson(needs.extract_new_branches.outputs.new_branches).length > 0 
      }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.extract_new_branches.outputs.new_branches) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Create new branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          BRANCH="${{ matrix.branch }}"
          echo "Creating new branch: $BRANCH"

          # Gitの設定
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 最新のmainを取得
          git checkout main
          git pull origin main

          # 新しいブランチを作成
          git checkout -b "$BRANCH"

      - name: Update branch-status.yaml
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const path = 'branch-status.yaml';
            const branch = '${{ matrix.branch }}';
            const baseName = branch.replace(/\/[^/]+$/, '');
            const currentTime = new Date().toISOString();

            let branchStatus = {};
            if (fs.existsSync(path)) {
              branchStatus = yaml.load(fs.readFileSync(path, 'utf8'));
            }

            branchStatus[baseName] = {
              branch_name: branch,
              created_at: currentTime
            };

            fs.writeFileSync(path, yaml.dump(branchStatus));

            console.log(`Updated ${path}`);

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          BRANCH="${{ matrix.branch }}"
          git add branch-status.yaml
          git commit -m "Update branch-status.yaml for $BRANCH"

          # ブランチと変更をプッシュ
          git push origin "$BRANCH"

  delete_lock:
    runs-on: [ self-hosted, Linux ]
    needs: yield_new_branches
    if: |
      ${{
        always()
      }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Delete .lock file
        run: |
          rm -f .lock

      - name: Commit and push .lock file deletion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .lock
          git commit -m "Unlock the repository after automatic branch management" || echo "No changes to commit"
          git push origin main
