name: Branch Management

on:
  schedule:
    - cron: '0 * * * *' # 毎時0分に実行

  workflow_dispatch:

jobs:
  branch_management:
    runs-on: [ self-hosted, Linux ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install js-yaml

      - name: Manage Branch Lifetime
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const branchStatusJsonName = 'branch-status.yaml';
            const config = yaml.load(fs.readFileSync('config.yaml', 'utf8'));

            const currentTime = new Date();
            console.log(`Current time: ${currentTime.toISOString()}`);

            for (const branchConfig of config.branches)
            {
              const baseName = branchConfig.name;
              const schedule = branchConfig.schedule;

              let shouldMerge = false;
              // 現在の日時がマージスケジュールと一致するか確認
              for (const scheduledTime of schedule)
              {
                const scheduledDate = new Date(scheduledTime);

                if (isNaN(scheduledDate))
                {
                  console.log(`Invalid scheduledTime: ${scheduledTime}`);
                  continue;
                }

                const timeDiff = currentTime.getTime() - scheduledDate.getTime();

                if (0 <= timeDiff && timeDiff < 60 * 60 * 1000)
                {
                  // 1時間以内
                  shouldMerge = true;
                  break;
                }
              }

              if (!shouldMerge)
              {
                continue;
              }

              const { data: branches } = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              const branchPattern = new RegExp(`^${baseName}/feature-(\\d{4})$`);

              // パターンに一致するブランチをすべてマージ
              for (const branch of branches) {
                if (branch.name.match(branchPattern)) {
                  const existingBranch = branch.name;

                  // ブランチをmainにマージ
                  try {
                    await github.rest.repos.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      base: 'main',
                      head: existingBranch,
                      commit_message: `Merging ${existingBranch} into main`
                    });

                    console.log(`Merged ${existingBranch} into main`);

                    // 古いブランチを削除（オプション）
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${existingBranch}`
                    });

                    console.log(`Deleted old branch ${existingBranch}`);
                  }
                  catch (error)
                  {
                    console.error(`Failed to merge or delete branch ${existingBranch}: ${error.message}`);

                    throw error;
                  }
                }
              }

              // branch-status.yamlを読み込み
              let branchStatus = {};
              if (fs.existsSync(branchStatusJsonName))
              {
                branchStatus = yaml.load(fs.readFileSync(branchStatusJsonName, 'utf8'));
              }

              // 新しい日付でブランチを作成
              const mmdd = ("0" + (currentTime.getMonth() + 1)).slice(-2) + ("0" + currentTime.getDate()).slice(-2);
              const newBranchName = `${baseName}/feature-${mmdd}`;

              // mainから新しいブランチを作成
              try
              {
                const { data: mainRef } = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/main'
                });

                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${newBranchName}`,
                  sha: mainRef.object.sha
                });

                console.log(`Created new branch ${newBranchName}`);

                // branchStatusにbasenameが存在しない場合は新規作成
                if (!branchStatus[baseName])
                {
                  branchStatus[baseName] = {
                    branch_name: newBranchName,
                    created_at: currentTime.toISOString()
                  };
                }
                else
                {
                  branchStatus[baseName].branch_name = newBranchName;
                  branchStatus[baseName].created_at = currentTime.toISOString();
                }
              }
              catch (error)
              {
                console.error(`Failed to create new branch ${newBranchName}: ${error.message}`);

                throw error;
              }

              try
              {
                // branch-status.yamlを更新
                fs.writeFileSync(branchStatusJsonName, yaml.dump(branchStatus));

                console.log('Updated ${branchStatusJsonName}');

                // 新しいブランチに対してbranch-status.yamlをコミット
                const { data: latestCommit } = await github.rest.repos.getCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${newBranchName}`
                });

                const treeItems = [
                  {
                    path: branchStatusJsonName,
                    mode: '100644',
                    type: 'blob',
                    content: fs.readFileSync(branchStatusJsonName, 'utf8')
                  }
                ];

                const { data: newTree } = await github.rest.git.createTree({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tree: treeItems,
                  base_tree: latestCommit.commit.tree.sha
                });

                const { data: newCommit } = await github.rest.git.createCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  message: `Update ${branchStatusJsonName}`,
                  tree: newTree.sha,
                  parents: [latestCommit.sha]
                });

                await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${newBranchName}`,
                  sha: newCommit.sha
                });

                console.log(`Committed and pushed ${branchStatusJsonName} to ${newBranchName}`);
              }
              catch (error)
              {
                console.error(`Failed to commit ${branchStatusJsonName}: ${error.message}`);

                throw error;
              }
            }

